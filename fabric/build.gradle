plugins {
    id "com.github.johnrengelman.shadow" version "$shadow_version"
    id "me.modmuss50.mod-publish-plugin"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
            exclude("**/.cache")
        }
    }
}

loom {
    Project common = project(":common")

    runs {
        datagen {
            client()

            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=logic_n_control"
            vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

            environmentVariable("DATAGEN", "TRUE")
        }
    }
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = "https://cursemaven.com" } // Forge Config API Port
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api}+${rootProject.minecraft_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon, project.configurations.shade]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

/*publishMods {
    file = remapJar.archiveFile
    version = "$mod_version-fabric-mc$rootProject.minecraft_version"
    type = STABLE
    displayName = "$display_name $mod_version Fabric $rootProject.minecraft_version"
    modLoaders.add("fabric")
    changelog = "View changelog at https://github.com/anthxnymc/$modid"

    curseforge {
        projectId = curseforge_id
        accessToken = System.getenv("CURSEFORGE_TOKEN")
        minecraftVersions.add(rootProject.minecraft_version)

        requires {
            slug = "cloth-config"
        }

        requires {
            slug = "architectury-api"
        }
    }

    modrinth {
        projectId = modrinth_id
        accessToken = System.getenv("MODRINTH_TOKEN")
        minecraftVersions.add(rootProject.minecraft_version)

        requires {
            slug = "cloth-config"
        }

        requires {
            slug = "architectury-api"
        }
    }
}*/

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.modid + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
